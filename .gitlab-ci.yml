stages:
  - build
  - test
  - format
  - deploy

variables:
  DEV_BRANCH: "master"
  STG_BRANCH: "staging"
  NODE_IMAGE: "node:16"
  PYTHON_IMAGE: "python:3.9.1-buster"

frontend build:
  stage: build
  needs: []
  image: $NODE_IMAGE
  tags:
    - docker
  rules:
    # ensure frontend builds if any frontend files have changed in the MR
    - if: '$CI_MERGE_REQUEST_ID != null'
      changes:
        - client/**/*
      when: always
    # always run if deploying
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH || $CI_COMMIT_BRANCH == $STG_BRANCH'
      when: always
  before_script:
    - cd client
    - npm ci
  script:
    - GENERATE_SOURCEMAP=false npm run build
  after_script:
    - cd client/build && tar -czvf ../../frontend.tar.gz .
  artifacts:
    expire_in: 1 week
    paths:
      - frontend.tar.gz

backend unit tests:
  stage: test
  needs: []
  image: $PYTHON_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - server/**/*
      when: always
  before_script:
    - cd server
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - python -m pytest --junitxml=report.xml tests
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit: server/report.xml

backend system tests:
  stage: test
  needs: []
  image: $PYTHON_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - server/**/*
      when: always
  variables:
    DB_USERNAME: "root"
    DB_PASSWORD: "ci-password"
    DB_HOSTNAME: "mysql"
    DB_PORT: "3306"
    DB_NAME: "cradle"
    PORT: "5000"
    MYSQL_DATABASE: "cradle"
    MYSQL_ROOT_PASSWORD: "ci-password"
    JWT_SECRET_KEY: "testkey"
  services:
    - mysql:5.7
  before_script:
    - apt-get update -y
    - apt-get install default-mysql-client -y
    - cd server
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python3 app.py &
    - python3 db.py rebuild --no-docker
    - python3 manage.py seed_test_data
  script:
    - python -m pytest --junitxml=report.xml systemTests
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit: server/report.xml

frontend lint:
  stage: format
  needs: []
  image: $NODE_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - client/**/*
      when: always
  before_script:
    - cd client
    - npm ci
  script:
    - ./node_modules/.bin/eslint "src/**/*.{ts,tsx}"

frontend format:
  stage: format
  needs: []
  image: $NODE_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - client/**/*
      when: always
  before_script:
    # Prettier version here should match version in package.json
    - npm install prettier@2.3.0 --global
  script:
    - prettier --check "client/src/**/*.{ts,tsx}"

backend format:
  stage: format
  needs: []
  image: $PYTHON_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - server/**/*
      when: always
  before_script:
    - cd server
    - pip install --upgrade pip
    # Ensure we get the same version of Black used by the project
    - pip install -r requirements.txt
  script:
    - black --check --exclude 'server/migrations/.*' .

.deploy-script: &deploy-script
  - cp /var/cradle/.env ./.env
  - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml build
  - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml up --force-recreate -d
  - docker image prune -f # remove unused images since we just built new ones
  - bash -c 'sleep 15' # wait for MySQL to restart
  - docker exec cradle_flask flask db upgrade

deploy development:
  stage: deploy
  environment:
    name: development
    url: https://cradle-dev.cmpt.sfu.ca
  tags:
    - deploy-development
  rules:
    - if: '$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $DEV_BRANCH'
      when: on_success
    - when: never
  script:
    - *deploy-script

deploy staging:
  stage: deploy
  environment:
    name: staging
    url: https://cradle-stg.cmpt.sfu.ca
  tags:
    - deploy-staging
  rules:
    - if: '$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $STG_BRANCH'
      when: on_success
    - when: never
  script:
    - *deploy-script
